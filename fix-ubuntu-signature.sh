#!/bin/bash

# ========================================
# SCRIPT DE CORRECTION DES SIGNATURES - UBUNTU
# GEDEPS - Correction automatique des probl√®mes de signature
# ========================================

echo "üîß Correction des Signatures - Ubuntu GEDEPS"
echo "=============================================="

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction pour afficher les messages
print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è $1${NC}"
}

print_info() {
    echo -e "${BLUE}‚ÑπÔ∏è $1${NC}"
}

# ========================================
# 1. V√âRIFICATION DES PR√âREQUIS
# ========================================
echo ""
echo "üîç V√©rification des pr√©requis..."

# V√©rifier si on est root ou sudo
if [ "$EUID" -ne 0 ]; then
    print_warning "Ce script n√©cessite des privil√®ges sudo. Relancez avec: sudo $0"
    exit 1
fi

# V√©rifier la version d'Ubuntu
if [ -f /etc/os-release ]; then
    . /etc/os-release
    print_info "Syst√®me d√©tect√©: $NAME $VERSION"
else
    print_warning "Impossible de d√©tecter la version du syst√®me"
fi

# ========================================
# 2. INSTALLATION DES EXTENSIONS PHP MANQUANTES
# ========================================
echo ""
echo "üì¶ Installation des extensions PHP..."

# D√©tecter la version de PHP
PHP_VERSION=$(php -v | head -n1 | cut -d' ' -f2 | cut -d'.' -f1,2)
print_info "Version PHP d√©tect√©e: $PHP_VERSION"

# Extensions √† installer
EXTENSIONS=(
    "php$PHP_VERSION-gd"
    "php$PHP_VERSION-imagick"
    "php$PHP_VERSION-curl"
    "php$PHP_VERSION-mbstring"
    "php$PHP_VERSION-xml"
    "php$PHP_VERSION-zip"
    "php$PHP_VERSION-dom"
    "php$PHP_VERSION-fileinfo"
    "php$PHP_VERSION-openssl"
)

for ext in "${EXTENSIONS[@]}"; do
    if dpkg -l | grep -q "^ii  $ext "; then
        print_success "$ext d√©j√† install√©"
    else
        print_info "Installation de $ext..."
        apt-get update
        apt-get install -y $ext
        if [ $? -eq 0 ]; then
            print_success "$ext install√© avec succ√®s"
        else
            print_error "√âchec de l'installation de $ext"
        fi
    fi
done

# ========================================
# 3. CONFIGURATION DES PERMISSIONS
# ========================================
echo ""
echo "üìÅ Configuration des permissions..."

# D√©tecter l'utilisateur web
WEB_USER="www-data"
if [ -f /etc/apache2/envvars ]; then
    WEB_USER="www-data"
elif [ -f /etc/nginx/nginx.conf ]; then
    WEB_USER="www-data"
else
    print_warning "Utilisateur web par d√©faut: $WEB_USER"
fi

print_info "Utilisateur web: $WEB_USER"

# Dossiers √† corriger
DIRECTORIES=(
    "storage/app"
    "storage/app/public"
    "storage/app/public/documents"
    "storage/app/public/documents/signed"
    "storage/app/public/signatures"
    "storage/logs"
    "bootstrap/cache"
    "public/storage"
)

for dir in "${DIRECTORIES[@]}"; do
    if [ -d "$dir" ]; then
        print_info "Correction des permissions pour $dir"
        chown -R $WEB_USER:$WEB_USER "$dir"
        chmod -R 755 "$dir"
        print_success "Permissions corrig√©es pour $dir"
    else
        print_warning "Dossier $dir non trouv√©, cr√©ation..."
        mkdir -p "$dir"
        chown -R $WEB_USER:$WEB_USER "$dir"
        chmod -R 755 "$dir"
        print_success "Dossier $dir cr√©√© avec les bonnes permissions"
    fi
done

# ========================================
# 4. CONFIGURATION PHP
# ========================================
echo ""
echo "‚öôÔ∏è Configuration PHP..."

# Fichier de configuration PHP
PHP_INI="/etc/php/$PHP_VERSION/apache2/php.ini"
if [ -f "$PHP_INI" ]; then
    print_info "Configuration de $PHP_INI"
    
    # Sauvegarder la configuration actuelle
    cp "$PHP_INI" "$PHP_INI.backup.$(date +%Y%m%d_%H%M%S)"
    print_success "Sauvegarde de la configuration PHP cr√©√©e"
    
    # Modifier les param√®tres importants
    sed -i 's/upload_max_filesize = .*/upload_max_filesize = 50M/' "$PHP_INI"
    sed -i 's/post_max_size = .*/post_max_size = 50M/' "$PHP_INI"
    sed -i 's/memory_limit = .*/memory_limit = 256M/' "$PHP_INI"
    sed -i 's/max_execution_time = .*/max_execution_time = 300/' "$PHP_INI"
    sed -i 's/max_input_time = .*/max_input_time = 300/' "$PHP_INI"
    
    print_success "Configuration PHP mise √† jour"
else
    print_warning "Fichier de configuration PHP non trouv√©: $PHP_INI"
fi

# ========================================
# 5. RED√âMARRAGE DES SERVICES
# ========================================
echo ""
echo "üîÑ Red√©marrage des services..."

# Red√©marrer Apache
if systemctl is-active --quiet apache2; then
    print_info "Red√©marrage d'Apache..."
    systemctl restart apache2
    if [ $? -eq 0 ]; then
        print_success "Apache red√©marr√© avec succ√®s"
    else
        print_error "Erreur lors du red√©marrage d'Apache"
    fi
fi

# Red√©marrer Nginx
if systemctl is-active --quiet nginx; then
    print_info "Red√©marrage de Nginx..."
    systemctl restart nginx
    if [ $? -eq 0 ]; then
        print_success "Nginx red√©marr√© avec succ√®s"
    else
        print_error "Erreur lors du red√©marrage de Nginx"
    fi
fi

# Red√©marrer PHP-FPM
if systemctl is-active --quiet php$PHP_VERSION-fpm; then
    print_info "Red√©marrage de PHP-FPM..."
    systemctl restart php$PHP_VERSION-fpm
    if [ $? -eq 0 ]; then
        print_success "PHP-FPM red√©marr√© avec succ√®s"
    else
        print_error "Erreur lors du red√©marrage de PHP-FPM"
    fi
fi

# ========================================
# 6. NETTOYAGE DU CACHE LARAVEL
# ========================================
echo ""
echo "üßπ Nettoyage du cache Laravel..."

# V√©rifier si Laravel est install√©
if [ -f "artisan" ]; then
    print_info "Nettoyage du cache Laravel..."
    
    # Vider le cache
    php artisan cache:clear
    php artisan config:clear
    php artisan route:clear
    php artisan view:clear
    
    # R√©g√©n√©rer les liens symboliques
    php artisan storage:link
    
    print_success "Cache Laravel nettoy√©"
else
    print_warning "Laravel non d√©tect√©, nettoyage du cache ignor√©"
fi

# ========================================
# 7. TEST DE FONCTIONNEMENT
# ========================================
echo ""
echo "üß™ Test de fonctionnement..."

# Test de cr√©ation d'image
php -r "
if (extension_loaded('gd')) {
    echo '‚úÖ Extension GD disponible\n';
    \$img = imagecreate(100, 50);
    if (\$img) {
        echo '‚úÖ Cr√©ation d\'image r√©ussie\n';
        imagedestroy(\$img);
    } else {
        echo '‚ùå √âchec de cr√©ation d\'image\n';
    }
} else {
    echo '‚ùå Extension GD non disponible\n';
}
"

# ========================================
# 8. R√âSUM√â ET RECOMMANDATIONS
# ========================================
echo ""
echo "üìã R√©sum√© et recommandations"
echo "=============================="

print_success "Correction termin√©e !"
echo ""
print_info "Prochaines √©tapes :"
echo "1. Testez la cr√©ation de signature dans votre application"
echo "2. V√©rifiez les logs : tail -f storage/logs/laravel.log"
echo "3. Si des probl√®mes persistent, consultez les logs d'erreur"
echo ""
print_info "Commandes utiles :"
echo "- V√©rifier les permissions : ls -la storage/"
echo "- V√©rifier les logs : tail -f storage/logs/laravel.log"
echo "- Tester PHP : php -m | grep gd"
echo "- Red√©marrer Apache : sudo systemctl restart apache2"
echo ""
print_warning "Si les probl√®mes persistent, contactez l'administrateur syst√®me."

echo ""
echo "üîß Correction termin√©e le $(date)"
